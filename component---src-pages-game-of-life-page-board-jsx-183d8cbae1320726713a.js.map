{"version":3,"sources":["webpack:///./src/pages/GameOfLifePage/Board.jsx","webpack:///./src/pages/GameOfLifePage/Cell.jsx"],"names":["withStyles","cell","width","props","cellSize","height","margin","cellSpacing","borderRadius","aliveCell","backgroundColor","aliveColor","deadCell","deadColor","classes","universe","universeDispatch","displayBoard","universeLength","length","rowNum","cells","row","rowLength","colNum","push","key","col","state","wrap","justify","alignItems","direction","alignContent","Cell","className","undefined","CELL_TYPES","ALIVE","classNames","onClick","type","ACTIONS","FLIP"],"mappings":"6FAGA,oEAiEeA,sBAnDI,CACfC,KAAM,CACFC,MAAO,SAAAC,GAAK,OAAIA,EAAMC,UACtBC,OAAQ,SAAAF,GAAK,OAAIA,EAAMC,UACvBE,OAAQ,SAAAH,GAAK,OAAIA,EAAMI,aACvBC,aAAc,OAElBC,UAAW,CACPC,gBAAiB,SAAAP,GAAK,OAAIA,EAAMQ,aAEpCC,SAAU,CACNF,gBAAiB,SAAAP,GAAK,OAAIA,EAAMU,aAwCzBb,EApCf,SAAeG,GAKX,IAL6B,IACrBW,EAAwCX,EAAxCW,QAASC,EAA+BZ,EAA/BY,SAAUC,EAAqBb,EAArBa,iBACrBC,EAAe,GACfC,EAAiBH,EAAWA,EAASI,OAAS,EAE3CC,EAAS,EAAGA,EAASF,EAAgBE,IAAU,CAIpD,IAHA,IAAMC,EAAQ,GACRC,EAAMP,EAASK,GACfG,EAAYD,EAAMA,EAAIH,OAAS,EAC5BK,EAAS,EAAGA,EAASD,EAAWC,IACrCH,EAAMI,KACF,kBAAC,UAAD,CACIX,QAASA,EACTY,IAAK,CAACN,EAAQI,GACdF,IAAKF,EACLO,IAAKH,EACLI,MAAON,EAAIE,GACXR,iBAAkBA,KAK9BC,EAAaQ,KACT,kBAAC,IAAD,CAAeC,IAAKN,EAAQS,KAAK,SAASC,QAAQ,SAASC,WAAW,UACjEV,IAKb,OACI,kBAAC,IAAD,CAAeW,UAAU,SAASF,QAAQ,SAASC,WAAW,SAASE,aAAa,UAC/EhB,O,kCC3Db,6EAqCeiB,UAvBf,SAAc/B,GAAkB,IACpBW,EAA+CX,EAA/CW,QAASQ,EAAsCnB,EAAtCmB,IAAKK,EAAiCxB,EAAjCwB,IAAKC,EAA4BzB,EAA5ByB,MAAOZ,EAAqBb,EAArBa,iBAC9BmB,EAAY,GAOhB,YANgBC,IAAZtB,IACAqB,EACIP,IAAUS,IAAWC,MAAQxB,EAAQL,UAAYK,EAAQF,SAC7DuB,EAAYI,IAAWJ,EAAWrB,EAAQb,OAI1C,4BACIkC,UAAWA,EACXK,QAAS,kBACLxB,EAAiB,CACbyB,KAAMC,IAAQC,KACdrB,IAAKA,EACLK,IAAKA","file":"component---src-pages-game-of-life-page-board-jsx-183d8cbae1320726713a.js","sourcesContent":["/**\n * @flow\n */\nimport React from \"react\";\n\nimport type { UniverseType } from \"types/typeExports\";\nimport { withStyles } from \"@material-ui/core\";\n\nimport GridContainer from \"components/Grid/GridContainer.jsx\";\nimport Cell from \"./Cell\";\n\ntype PropType = {\n    classes: Object,\n    universe: UniverseType,\n    universeDispatch: Object,\n};\n\nconst boardStyle = {\n    cell: {\n        width: props => props.cellSize,\n        height: props => props.cellSize,\n        margin: props => props.cellSpacing,\n        borderRadius: \"5px\",\n    },\n    aliveCell: {\n        backgroundColor: props => props.aliveColor,\n    },\n    deadCell: {\n        backgroundColor: props => props.deadColor,\n    },\n};\n\nfunction Board(props: PropType) {\n    const { classes, universe, universeDispatch } = props;\n    const displayBoard = [];\n    const universeLength = universe ? universe.length : 0;\n\n    for (let rowNum = 0; rowNum < universeLength; rowNum++) {\n        const cells = [];\n        const row = universe[rowNum];\n        const rowLength = row ? row.length : 0;\n        for (let colNum = 0; colNum < rowLength; colNum++) {\n            cells.push(\n                <Cell\n                    classes={classes}\n                    key={[rowNum, colNum]}\n                    row={rowNum}\n                    col={colNum}\n                    state={row[colNum]}\n                    universeDispatch={universeDispatch}\n                />\n            );\n        }\n\n        displayBoard.push(\n            <GridContainer key={rowNum} wrap=\"nowrap\" justify=\"center\" alignItems=\"center\">\n                {cells}\n            </GridContainer>\n        );\n    }\n\n    return (\n        <GridContainer direction=\"column\" justify=\"center\" alignItems=\"center\" alignContent=\"center\">\n            {displayBoard}\n        </GridContainer>\n    );\n}\n\nexport default withStyles(boardStyle)(Board);\n","/**\n * @flow\n */\n\nimport React from \"react\";\nimport classNames from \"classnames\";\n\nimport { ACTIONS } from \"hooks/useUniverse.jsx\";\nimport { CELL_TYPES } from \"types/exports\";\n\ntype PropType = {\n    key: [number, number],\n    row: Number,\n    col: Number,\n    state: CELL_TYPES,\n    universeDispatch: Object,\n};\n\nfunction Cell(props: PropType) {\n    const { classes, row, col, state, universeDispatch } = props;\n    let className = \"\";\n    if (classes !== undefined) {\n        className =\n            state === CELL_TYPES.ALIVE ? classes.aliveCell : classes.deadCell;\n        className = classNames(className, classes.cell);\n    }\n\n    return (\n        <button\n            className={className}\n            onClick={() =>\n                universeDispatch({\n                    type: ACTIONS.FLIP,\n                    row: row,\n                    col: col,\n                })\n            }\n        ></button>\n    );\n}\n\nexport default Cell;\n"],"sourceRoot":""}