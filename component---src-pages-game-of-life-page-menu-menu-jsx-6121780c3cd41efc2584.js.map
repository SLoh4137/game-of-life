{"version":3,"sources":["webpack:///./src/pages/GameOfLifePage/Menu/BoardCustomization.jsx","webpack:///./src/pages/GameOfLifePage/Menu/UniverseControls.jsx","webpack:///./src/pages/GameOfLifePage/Menu/Menu.jsx","webpack:///./node_modules/@material-ui/icons/Menu.js"],"names":["BoardCustomization","props","optionsState","optionsDispatch","aliveColor","deadColor","align","justify","xs","zeroMinWidth","container","label","option","actionType","OPTION_ACTIONS","SET_ALIVE_COLOR","defaultValue","dispatch","SET_DEAD_COLOR","UniverseControls","universeDispatch","isPaused","cellSize","cellSpacing","direction","alignItems","alignContent","md","fullWidth","id","type","InputLabelProps","shrink","margin","variant","onClick","event","SET_CELL_SIZE","target","value","SET_CELL_SPACING","UNIVERSE_ACTIONS","RESET","CLEAR","Menu","className","generation","useState","isOpen","setOpen","toggleDrawer","open","key","size","anchor","onClose","onOpen","sm","_interopRequireDefault","Object","defineProperty","exports","_react","_default","createElement","Fragment","fill","d"],"mappings":"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","file":"component---src-pages-game-of-life-page-menu-menu-jsx-6121780c3cd41efc2584.js","sourcesContent":["/**\n * @flow\n */\n\nimport React from \"react\";\n\nimport { ACTIONS as OPTION_ACTIONS } from \"hooks/useOptions\";\n\nimport { Paper } from \"@material-ui/core\";\n\nimport GridContainer from \"components/Grid/GridContainer\";\nimport GridItem from \"components/Grid/GridItem\";\n\nimport ChooseColorInput from \"./ChooseColorInput\";\n\ntype Props = {\n    classes: Object,\n    optionsState: Object,\n    optionsDispatch: Object,\n};\n\nexport default function BoardCustomization(props: Props) {\n    const { optionsState, optionsDispatch } = props;\n\n    // The following are needed to allow gatsby build to verify optionsState exists\n    const { aliveColor, deadColor} = optionsState ? optionsState : {};\n\n    return (\n        <Paper>\n            <h4 align=\"center\">Board Customization</h4>\n            <GridContainer justify=\"center\">\n                <GridItem xs={6} zeroMinWidth container justify=\"center\">\n                    <ChooseColorInput\n                        label=\"Alive Color\"\n                        option=\"aliveColor\"\n                        actionType={OPTION_ACTIONS.SET_ALIVE_COLOR}\n                        defaultValue={aliveColor}\n                        dispatch={optionsDispatch}\n                    />\n                </GridItem>\n\n                <GridItem xs={6} zeroMinWidth container justify=\"center\">\n                    <ChooseColorInput\n                        label=\"Dead Color\"\n                        option=\"deadColor\"\n                        actionType={OPTION_ACTIONS.SET_DEAD_COLOR}\n                        defaultValue={deadColor}\n                        dispatch={optionsDispatch}\n                    />\n                </GridItem>\n            </GridContainer>\n        </Paper>\n    );\n}\n","/**\n * @flow\n */\nimport React from \"react\";\n\n//import Button from \"components/CustomButtons/Button\";\nimport GridContainer from \"components/Grid/GridContainer\";\nimport GridItem from \"components/Grid/GridItem\";\nimport PlayPauseButton from \"../PlayPauseButton\";\n\nimport { TextField, Paper, Button } from \"@material-ui/core\";\n\nimport { ACTIONS as OPTION_ACTIONS } from \"hooks/useOptions\";\nimport { ACTIONS as UNIVERSE_ACTIONS } from \"hooks/useUniverse\";\n\ntype Props = {\n    optionsState: Object,\n    optionsDispatch: Object,\n    universeState: Object,\n    universeDispatch: Object,\n};\n\nfunction UniverseControls(props: Props) {\n    const { optionsState, optionsDispatch, universeDispatch } = props;\n\n    // Needed for gatsby build\n    const { isPaused, cellSize, cellSpacing } = optionsState ? optionsState : {};\n\n    return (\n        <Paper>\n            <GridContainer\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n                alignContent=\"center\"\n            >\n                <h4 align=\"center\">Board Controls</h4>\n\n                <PlayPauseButton\n                    isPaused={isPaused}\n                    dispatch={optionsDispatch}\n                />\n\n                <GridContainer justify=\"center\" alignItems=\"center\">\n                    <GridItem xs={6} md={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-set-cell-size\"\n                            label=\"Cell Size\"\n                            type=\"number\"\n                            defaultValue={cellSize}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onClick={event =>\n                                optionsDispatch({\n                                    type: OPTION_ACTIONS.SET_CELL_SIZE,\n                                    cellSize: event.target.value,\n                                })\n                            }\n                        />\n                    </GridItem>\n                    <GridItem xs={6} md={6}>\n                        <TextField\n                            fullWidth\n                            id=\"outlined-set-cell-spacing\"\n                            label=\"Cell Spacing\"\n                            type=\"number\"\n                            defaultValue={cellSpacing}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            onClick={event =>\n                                optionsDispatch({\n                                    type: OPTION_ACTIONS.SET_CELL_SPACING,\n                                    cellSpacing: event.target.value,\n                                })\n                            }\n                        />\n                    </GridItem>\n                </GridContainer>\n\n                <GridContainer justify=\"center\">\n                    <GridItem xs={6}>\n                        <Button\n                            fullWidth\n                            variant=\"filled\"\n                            onClick={() => {\n                                universeDispatch({\n                                    type: UNIVERSE_ACTIONS.RESET,\n                                });\n                            }}\n                        >\n                            NEW BOARD\n                        </Button>\n                    </GridItem>\n                    <GridItem xs={6}>\n                        <Button\n                            fullWidth\n                            variant=\"filled\"\n                            onClick={() => {\n                                universeDispatch({\n                                    type: UNIVERSE_ACTIONS.CLEAR,\n                                });\n                            }}\n                        >\n                            CLEAR\n                        </Button>\n                    </GridItem>\n                </GridContainer>\n            </GridContainer>\n        </Paper>\n    );\n}\n\nexport default UniverseControls;\n","import React, { useState } from \"react\";\n\nimport { Fab, SwipeableDrawer } from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport GridContainer from \"components/Grid/GridContainer\";\nimport GridItem from \"components/Grid/GridItem\";\n\nimport BoardCustomization from \"./BoardCustomization\";\nimport UniverseControls from \"./UniverseControls\";\n\ntype Props = {\n    className: String,\n    generation: number,\n    optionsState: Object,\n    optionsDispatch: Object,\n    universeDispatch: Object,\n};\n\nfunction Menu(props: Props) {\n    const {\n        className,\n        generation,\n        optionsState,\n        optionsDispatch,\n        universeDispatch,\n    } = props;\n    const [isOpen, setOpen] = useState(false);\n\n    const toggleDrawer = open => event => {\n        if (\n            event &&\n            event.type === \"keydown\" &&\n            (event.key === \"Tab\" || event.key === \"Shift\")\n        ) {\n            return;\n        }\n\n        setOpen(open);\n    };\n\n    return (\n        <>\n            <Fab\n                className={className}\n                size=\"small\"\n                onClick={toggleDrawer(true)}\n            >\n                <MenuIcon />\n            </Fab>\n            <SwipeableDrawer\n                anchor=\"bottom\"\n                open={isOpen}\n                onClose={toggleDrawer(false)}\n                onOpen={toggleDrawer(true)}\n            >\n                <h3 align=\"center\">Generation: {generation}</h3>\n                <GridContainer justify=\"center\">\n                    <GridItem xs={12} sm={6}>\n                        <UniverseControls\n                            optionsState={optionsState}\n                            optionsDispatch={optionsDispatch}\n                            universeDispatch={universeDispatch}\n                        />\n                    </GridItem>\n                    <GridItem xs={12} sm={6}>\n                        <BoardCustomization\n                            optionsState={optionsState}\n                            optionsDispatch={optionsDispatch}\n                        />\n                    </GridItem>\n                </GridContainer>\n            </SwipeableDrawer>\n        </>\n    );\n}\n\nexport default Menu;\n","\"use strict\";\n\nrequire(\"core-js/modules/es6.object.define-property\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon[\"default\"])(_react[\"default\"].createElement(_react[\"default\"].Fragment, null, _react[\"default\"].createElement(\"path\", {\n  fill: \"none\",\n  d: \"M0 0h24v24H0z\"\n}), _react[\"default\"].createElement(\"path\", {\n  d: \"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"\n})), 'Menu');\n\nexports[\"default\"] = _default;"],"sourceRoot":""}