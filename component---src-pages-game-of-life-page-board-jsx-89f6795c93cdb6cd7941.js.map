{"version":3,"sources":["webpack:///./src/pages/GameOfLifePage/Board.jsx","webpack:///./src/pages/GameOfLifePage/Cell.jsx"],"names":["Board","props","classes","universe","universeDispatch","displayBoard","universeLength","length","rowNum","cells","row","rowLength","colNum","push","key","col","state","wrap","justify","alignItems","direction","alignContent","Cell","className","undefined","CELL_TYPES","ALIVE","aliveCell","deadCell","onClick","type","ACTIONS","FLIP"],"mappings":"6FAGA,wDAgDeA,UApCf,SAAeC,GAKX,IAL6B,IACrBC,EAAwCD,EAAxCC,QAASC,EAA+BF,EAA/BE,SAAUC,EAAqBH,EAArBG,iBACrBC,EAAe,GACfC,EAAiBH,EAAWA,EAASI,OAAS,EAE3CC,EAAS,EAAGA,EAASF,EAAgBE,IAAU,CAIpD,IAHA,IAAMC,EAAQ,GACRC,EAAMP,EAASK,GACfG,EAAYD,EAAMA,EAAIH,OAAS,EAC5BK,EAAS,EAAGA,EAASD,EAAWC,IACrCH,EAAMI,KACF,kBAAC,UAAD,CACIX,QAASA,EACTY,IAAK,CAACN,EAAQI,GACdF,IAAKF,EACLO,IAAKH,EACLI,MAAON,EAAIE,GACXR,iBAAkBA,KAK9BC,EAAaQ,KACT,kBAAC,IAAD,CAAeC,IAAKN,EAAQS,KAAK,SAASC,QAAQ,SAASC,WAAW,UACjEV,IAKb,OACI,kBAAC,IAAD,CAAeW,UAAU,SAASF,QAAQ,SAASC,WAAW,SAASE,aAAa,UAC/EhB,K,kCC1Cb,wDAmCeiB,UAtBf,SAAcrB,GAAkB,IACpBC,EAA+CD,EAA/CC,QAASQ,EAAsCT,EAAtCS,IAAKK,EAAiCd,EAAjCc,IAAKC,EAA4Bf,EAA5Be,MAAOZ,EAAqBH,EAArBG,iBAC9BmB,EAAY,GAMhB,YALgBC,IAAZtB,IACAqB,EACIP,IAAUS,IAAWC,MAAQxB,EAAQyB,UAAYzB,EAAQ0B,UAI7D,4BACIL,UAAWA,EACXM,QAAS,kBACLzB,EAAiB,CACb0B,KAAMC,IAAQC,KACdtB,IAAKA,EACLK,IAAKA","file":"component---src-pages-game-of-life-page-board-jsx-89f6795c93cdb6cd7941.js","sourcesContent":["/**\n * @flow\n */\nimport React from \"react\";\nimport type { UniverseType } from \"types/typeExports\";\n\nimport GridContainer from \"components/Grid/GridContainer.jsx\";\nimport Cell from \"./Cell\";\n\ntype PropType = {\n    classes: Object,\n    universe: UniverseType,\n    universeDispatch: Object,\n};\n\nfunction Board(props: PropType) {\n    const { classes, universe, universeDispatch } = props;\n    const displayBoard = [];\n    const universeLength = universe ? universe.length : 0;\n\n    for (let rowNum = 0; rowNum < universeLength; rowNum++) {\n        const cells = [];\n        const row = universe[rowNum];\n        const rowLength = row ? row.length : 0;\n        for (let colNum = 0; colNum < rowLength; colNum++) {\n            cells.push(\n                <Cell\n                    classes={classes}\n                    key={[rowNum, colNum]}\n                    row={rowNum}\n                    col={colNum}\n                    state={row[colNum]}\n                    universeDispatch={universeDispatch}\n                />\n            );\n        }\n\n        displayBoard.push(\n            <GridContainer key={rowNum} wrap=\"nowrap\" justify=\"center\" alignItems=\"center\">\n                {cells}\n            </GridContainer>\n        );\n    }\n\n    return (\n        <GridContainer direction=\"column\" justify=\"center\" alignItems=\"center\" alignContent=\"center\">\n            {displayBoard}\n        </GridContainer>\n    );\n}\n\nexport default Board;\n","/**\n * @flow\n */\n\nimport React from \"react\";\n\nimport { ACTIONS } from \"hooks/useUniverse.jsx\";\nimport { CELL_TYPES } from \"types/exports\";\n\ntype PropType = {\n    key: [number, number],\n    row: Number,\n    col: Number,\n    state: CELL_TYPES,\n    universeDispatch: Object,\n};\n\nfunction Cell(props: PropType) {\n    const { classes, row, col, state, universeDispatch } = props;\n    let className = \"\";\n    if (classes !== undefined) {\n        className =\n            state === CELL_TYPES.ALIVE ? classes.aliveCell : classes.deadCell;\n    }\n\n    return (\n        <button\n            className={className}\n            onClick={() =>\n                universeDispatch({\n                    type: ACTIONS.FLIP,\n                    row: row,\n                    col: col,\n                })\n            }\n        ></button>\n    );\n}\n\nexport default Cell;\n"],"sourceRoot":""}